<?xml version="1.0" encoding="utf-8"?>
<mx:AdvancedDataGrid creationComplete="init()" xmlns:mx="http://www.adobe.com/2006/mxml" 
showHeaders="false" 
disclosureOpenIcon="{minus}" 
disclosureClosedIcon="{plus}"
folderOpenIcon="{null}" 
folderClosedIcon="{null}" 
groupItemRenderer="{new ClassFactory(CubeRenderer)}" 
fontWeight="bold"
rollOverColor="white" 
selectionColor="white" selectionMode="multipleCells" selectable="true" selectedCells="{_selected}"
alternatingItemColors="[0xFFFFFF, 0xFFFFFF]" 
rowHeight="24" mouseEnabled="true" allowDragSelection="true"
showDataTips="true" dragEnabled="true" dragMoveEnabled="true"
 iconFunction="iconFunc" useHandCursor="true" buttonMode="true"
dataTipFunction="toolTipFunction">

    <mx:columns >
        <mx:AdvancedDataGridColumn   dataField="name"/>
    </mx:columns>

    <mx:Script>
        <![CDATA[
        	import com.ignite.olap.ElementsDelegate;
        	import mx.core.DragSource;
        	import mx.events.DragEvent;
        	import mx.events.ListEvent;

            import mx.olap.IOLAPCube;
            import mx.collections.HierarchicalCollectionView;
            import mx.collections.ArrayCollection;
            import mx.olap.IOLAPAttribute;
            import mx.olap.IOLAPCube;
            import mx.olap.IOLAPDimension;
            import mx.olap.IOLAPHierarchy;
            import mx.olap.IOLAPLevel;
            import mx.olap.IOLAPMember;
			import com.igniteanalytics.logging.ASLogger;
	[Bindable]
	public var _useHandCursor:Boolean=true;
			
	[Bindable]
	public var _includeMembers:Boolean=true;
			
			private static var logger:ASLogger=new ASLogger("olap.browser.CubeBrowser");
	[Bindable]
	private var _selected:Array=new Array();

	[Embed(source="assets/tree_database.gif")]
	[Bindable]
    public var cubeIcon:Class;
            
    [Embed(source="assets/tree_dimension.gif")]
	[Bindable]
	public var dimIcon:Class;
    
	[Embed(source="assets/tree_heir.gif")]
	[Bindable]
    public var heirIcon:Class;
    
    [Embed(source="assets/tree_measure.gif")]
	[Bindable]
    public var measureIcon:Class;
    
	[Embed(source="assets/tree_member.gif")]
	[Bindable]
    public var memIcon:Class;
    [Embed(source="assets/tree_level.gif")]
	[Bindable]
    public var levelIcon:Class;
     
    [Bindable]
    public var _selectedNode:Object=null; 
     
    private var _lockChanges:Boolean=false;
   		//Cannot figure out another way to get the cell object 
     	private function listEventHandler(event:ListEvent):void{
     		if (!_lockChanges){//to prevent the user from rolling over a different
     							//node during a drag
     			_selectedNode=CubeRenderer(event.itemRenderer)._node;
		     		
     		}
     	}
     
		private function dragStart_Handler(event:Object):void{
																				logger.logDebug("dragStart_Handler _lockChanges:"+_lockChanges);
            //get children if needed:
          	
			_lockChanges=true;		
		}
		
		private function dragComplete_Handler(event:Object):void{
			_lockChanges=false;
																			logger.logDebug("dragComplete_Handler _lockChanges:"+_lockChanges);
            	
		}
	private function init():void{
//		addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler2);
		//this.addEventListener(MouseEvent.CLICK,listEventHandler);
		this.addEventListener(ListEvent.ITEM_ROLL_OVER,listEventHandler);
		this.addEventListener(DragEvent.DRAG_START,dragStart_Handler);
		this.addEventListener(DragEvent.DRAG_COMPLETE,dragComplete_Handler);
	}

            [Embed("assets/plus.JPG")]
			[Bindable]
			public var plus:Class;
            [Embed("assets/minus.JPG")] 		
			[Bindable]            
			public var minus:Class;

            private var _cube:IOLAPCube;
            public function set cube(c:IOLAPCube):void
            {
                var hData:CubeView = new CubeView(new ArrayCollection([c]),_includeMembers);
                var hView:HierarchicalCollectionView = new HierarchicalCollectionView(hData, {});
                this.dataProvider = hView;
            }
            public function get cube():IOLAPCube
            {
                return _cube;
            }
            public function toolTipFunction(value:Object):String
            {
                var type:String = "";
                if(value is IOLAPCube)
                    type = "Cube";
                else if (value is IOLAPDimension)
                    type = "Dimension";
                else if (value is IOLAPAttribute)
                    type = "Attribute Hierarchy";
                else if (value is IOLAPHierarchy)
                    type = "Hierarchy";
                else if (value is IOLAPLevel)
                    type = "Level";
                else if (value is IOLAPMember)
                    type = "Member";
                else
                    type = "";
                if(!(value is AdvancedDataGridColumn))       
                    return type+" - "+value.name;		                

                return " ";
            }
	
			 // Define the groupIconFunction callback function.
	         public function iconFunc(item:Object):Class {
	          
	           var i:int=0;
	            if(item is IOLAPCube)
                    return cubeIcon;
                else if (item is IOLAPDimension)
                    return dimIcon;
                else if (item is IOLAPAttribute)
                    return heirIcon;
                else if (item is IOLAPHierarchy)
                    return heirIcon;
                else if (item is IOLAPLevel)
                    return levelIcon;
                else if (item is IOLAPMember)
                    return memIcon;
                else
                    return levelIcon;
               
	         }
	        
            override protected function addDragData(ds:Object):void    // actually a DragSource
            {
            																		logger.logDebug("addDragData");
            	var o:Object=this.selectedData;
            	var p:Object=this.selectedItem;
            	var x:Array=this.copySelectedItems();
            	//Ticket 52: When dragging a level members not listed
            	//kick off member retrieval when dragging since 
            	//odds are that the members will be needed
				ElementsDelegate.getChildrenTuples(this._selectedNode);		
			
              	DragSource(ds).addData(this._selectedNode,"node");
            }
            
        ]]>
    </mx:Script>
</mx:AdvancedDataGrid>
