<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="{_label}" preinitialize="preInit()" 
	 creationComplete="initCube()" 
		xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		xmlns:fc="http://www.adobe.com/2007/fc" 
		xmlns:browser="com.ignite.olap.browser.*" xmlns:xmla="com.ignite.xmla.*" xmlns:olap="com.ignite.olap.*">
	<mx:Script>
	<![CDATA[
		import mx.olap.IOLAPAxisPosition;
		import com.igniteanalytics.logging.ASLogger;
		import com.ignite.olap.Query;
		import com.ignite.olap.Level;
		import com.ignite.olap.Hierarchy;
		import com.ignite.olap.Dimension;
		import mx.olap.OLAPCube;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.controls.Label;
		import mx.controls.ProgressBar;
 		import mx.effects.Move;
		import mx.managers.PopUpManager;
		import mx.rpc.AsyncResponder;
		import mx.rpc.AsyncToken;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;

		import mx.events.CubeEvent;
		import mx.olap.IOLAPResult;
		import mx.olap.IOLAPCube;

 		import com.ignite.olap.Query;
		import mx.olap.OLAPQuery;
	//    [Embed("assets/hide.gif")]
	//    public var hideIcon:Class;
	
	//    [Embed("assets/show.gif")]
	//    public var showIcon:Class;
		private var logger:ASLogger=new ASLogger("MDXQuery");
	
			
		[Bindable]
		public var _label:String="New Query ";
		
		[Bindable]
		public var _cubeToUse:String=null;
		[Bindable]
		public var _serverURI:String="";
		[Bindable]
		public var _dataSource:String="";
		[Bindable] 
		public var _catalog:String="";
		
		private function preInit():void{
			_label=_label+":"+_cubeToUse;
		}
		private function initCube():void
		{
           	logger.logDebug("initCube instantiated cube:"+_cubeToUse+" uri-"+_serverURI);
            cube.addEventListener("complete", completeHandler);
            cube.addEventListener("progress", showProgress);
            cube.addEventListener(FaultEvent.FAULT, refreshFaultHandler);
            addProgressBar();
            cube.refresh();
      	}
		
		
		private function completeHandler(event:CubeEvent):void
 		{
			logger.logDebug("completeHandler cube built:"+_cubeToUse+" uri-"+_serverURI);
 			logger.logInfo("completeHandler cube built:"+_cubeToUse+" uri-"+_serverURI);
			
			var root:Object=new Object();
			root.displayName="Dimensions";
			
			var x:ArrayCollection=cube.dimensions as ArrayCollection;
			
			root.children=cube.dimensions;
			
			//dimesions.dataProvider=root;
			
			cb.cube=cube;
			
			//odg.cube=cube;
 			
			PopUpManager.removePopUp(progressBar);
 			
 		}
 		private function showProgress(event:CubeEvent):void
 		{
            progressBar.setProgress(100*(event.progress/event.total), 100);
            progressBar.label = event.message;
  		}
  		private function refreshFaultHandler(event:FaultEvent):void
  		{
			PopUpManager.removePopUp(progressBar);
  			Alert.show(event.fault.rootCause.text);
  		}

 		private var progressBar:ProgressBar;
 		private function addProgressBar():void
 		{
            progressBar = new ProgressBar();
            progressBar.minimum = 0;
            progressBar.maximum = 100;
            progressBar.visible = true;
            progressBar.labelPlacement = "bottom"
            progressBar.label = "Initialzing Cube";
            progressBar.direction = "right";
            progressBar.mode = "manual";
            progressBar.width = 300;

            PopUpManager.addPopUp(progressBar, this, true);
            PopUpManager.centerPopUp(progressBar);

 		}
        //---------------------------------------------
        //  Query execution on a cube
        //---------------------------------------------
		private function executeQuery():void
		{
  			var token:AsyncToken =cube.execute(new Query(query.text));
			token.addResponder(new AsyncResponder(resultHandler, faultHandler));
			errorPane.visible = false;
 		}

 		private function resultHandler(result:Object, token:Object = null):void
 		{
 			odg.dataProvider = result as IOLAPResult;
 		
 			invalidateProperties();
 		}

 		private function faultHandler(info:Object, token:Object = null):void
 		{
 			odg.dataProvider = null;
 			if(info && info.message)
	 			showErrorPane(info);
 		}
 		private function showErrorPane(info:Object):void
 		{
            var point:Point = new Point(query.x, query.y);
            point = rightFrame.localToGlobal(point);

            errorPane.move(point.x, point.y+query.height);
            errorPane.width = query.width;

 			errorPane.text = info.message;
 			errorPane.visible = true;
 			errorPane.height = 30;
 			var move:Move = new Move(errorPane);
 			move.yFrom = query.y+query.height;
 			move.yBy = -errorPane.height;
 			move.play();
 		}
	    //---------------------------------------------
        //  Conditional highlighting
        //---------------------------------------------
        // Ticket 33, 34 
        /* http://livedocs.adobe.com/flex/3/html/help.html?content=olapdatagrid_9.html
        
        */
        private function defaultConditionalStyle(row:IOLAPAxisPosition,column:IOLAPAxisPosition,value:Number):Object{
        	if ((highThreshold>0) && value>highThreshold){
        		return {color:highColor};
        	}
        	if ((lowThreshold>0)&& value<lowThreshold){
        		return {color:lowColor};
        	}
        	return null;
        }
        public var conditionalStyle:Function=defaultConditionalStyle;
        public var highThreshold:Number=1000;
        public var highColor:Number=65280;//0x00FF00
        
        public var lowThreshold:Number=50;
        public var lowColor:Number=65535;//00FFFF
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 		[Bindable]
 		//public var _startQuery:String="SELECT {[Measures].[Org Salary]} ON columns, Hierarchize(Union({[Employees].[All Employees]}, [Employees].[All Employees].Children)) ON rows FROM HR WHERE ([Time].[1997])";
		public var _startQuery:String = "select [Retailers].[Region] on columns, [Products].[Product line] on rows from [GO Sales and Marketing]";
	]]>
</mx:Script>


<olap:Cube id="cube" dataSource="{_dataSource}"  catalog="{_catalog}" name="{_cubeToUse}" serviceURL="{_serverURI}"/>

<mx:HDividedBox width="100%" height="100%" id="divider">
	<mx:VBox width="20%" height="100%" id="left">	
		<browser:CubeBrowser id="cb" height="100%" width="100%"/>
	</mx:VBox>
	<mx:VDividedBox width="80%" height="100%" id="rightFrame">
		<mx:VBox width="98%" height="30%">
			
			<mx:Label text="MDX Query Area"/>
		
			<mx:TextArea width="100%" height="100%" id="query" text="{_startQuery}"/>
			
			<mx:HBox horizontalAlign="center" verticalAlign="middle">
				<mx:Button label="Execute Query" click="executeQuery()"/><mx:Button label="Save Query" click="executeQuery()"/>
			</mx:HBox>
		</mx:VBox>
		
		<mx:OLAPDataGrid styleFunction="conditionalStyle" width="98%" height="70%" id="odg" selectionMode="multipleCells" horizontalScrollPolicy="on"/>

		<!--<grid:PivotOLAPGrid  width="98%" height="70%" id="odg" selectionMode="singleCell" horizontalScrollPolicy="on"/>
		-->
	</mx:VDividedBox>
</mx:HDividedBox>
<mx:TextArea editable="false" id="errorPane" visible="false" styleName="errorPaneStyle"/>
</mx:Canvas>
