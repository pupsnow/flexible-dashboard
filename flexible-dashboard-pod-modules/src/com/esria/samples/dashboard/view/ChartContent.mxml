<?xml version="1.0" encoding="utf-8"?>
<!--
 Displays a ColumnChart and LineChart using a ViewStack.
 The ColumnChart and LineChart allow a user to drill-down
 one level. For the demo, random data is generated.
 The ColumnChart and LineChart use the same dataProvider.
-->
<PodContentBase
	xmlns="com.esria.samples.dashboard.view.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:effects="qs.charts.effects.*"
	xmlns:renderers="qs.charts.renderers.*"
	width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import mx.charts.chartClasses.ChartBase;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.HitData;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import spark.events.IndexChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			// The original data provider used for drillUp.
			private var initialDataProvider:ArrayCollection;
			[Bindable]
			private var dataProvider:ArrayCollection;
			[Bindable]
			private var _selectedViewIndex:Number = 0;
			
			// Chart drill down variables. Users can only drill down
			// one level then click the chart to drill up.
			// Note, the majority of the drill down code including all of the classes in the "qs" package
			// are from Ely Greenfield's blog, http://www.quietlyscheming.com/blog/charts/chart-drilldown-animations/.
			private var chart:ChartBase;
			private var series:Series;
			private var drillToIndex:Number;
			
			override protected function onResultHttpService(e:ResultEvent):void
			{
				var a:Array = xmlListToObjectArray(e.result.item);
				var ac:ArrayCollection = new ArrayCollection(a);
				initialDataProvider = ac;
				dataProvider = ac;
				
				// Get the values from properties XML.
				if (properties.@selectedViewIndex.toString() != null &&
					Number(properties.@selectedViewIndex) < viewStack.numChildren) // Make sure the index is in range.
					selectedViewIndex = Number(properties.@selectedViewIndex);
				else
					selectedViewIndex = 0;
				
				columnChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				lineChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
			}
			
			private function set selectedViewIndex(n:Number):void
			{
				_selectedViewIndex = n;
				if (n == 0)
				{
					chart = columnChart;
					series = columnSeries;
				}
				else
				{
					chart = lineChart;
					series = lineSeries;
				}
			}
			
			private function onChangeComboBox(e:IndexChangeEvent):void
			{
				var index:Number = DropDownList(e.target).selectedIndex;
				selectedViewIndex = index;
				dispatchViewStackChange(index);
			}

			
			private function columnChartDataTipFunction(o:HitData):String
			{
				var a:Array = properties.@dataTipUnitLabel.split("*");
				var s:String = o.item[properties.@dataTipLabelField] + "\n";
				s += a[0] + o.item[properties.@valueField] + a[1] + "\n";
				return s;
			}
			
			// Creates random drill down data.
			// Assumes initial data is months and breaks down months into 30 days.
			public function createDrillDownData(data:Object):ArrayCollection
			{
				var ac:ArrayCollection = new ArrayCollection();
				var total:Number = data[properties.@valueField];
				var len:Number = 30;
				var randomPercents:Array = new Array();
				var totalPercents:Number = 0;
				var value:Number;
				// Generate an Array of random numbers that will be used to create percentages of the totals in the next loop.
				for (var i:Number = 0; i < len; i ++)
				{
					value = Math.max(.1, Math.random());// Make sure the number is not zero.
					randomPercents.push(value);
					totalPercents += value;
				}

				for (i = 0; i < len; i ++)
				{
					var o:Object = new Object();
					value = (randomPercents[i] / totalPercents) * total;
					o[properties.@valueField] = Math.round(value * 10) / 10;
					o[properties.@categoryField] = i + 1;
					ac.addItem(o);
				}
				
				return ac;
			}
			
			public function drillDown(e:ChartItemEvent):void
			{
				chart.showDataTips = false;
				drillToIndex = e.hitData.chartItem.index
				drillDownEffect.drillFromIndex = drillToIndex;
				series.setStyle("showDataEffect", drillDownEffect);
				dataProvider = createDrillDownData(Object(e.hitData.chartItem.item)); 
				
				columnChart.removeEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				lineChart.removeEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				columnChart.addEventListener(MouseEvent.CLICK, drillUp);
				lineChart.addEventListener(MouseEvent.CLICK, drillUp);
			}
			
			public function drillUp(e:MouseEvent):void
			{
				chart.showDataTips = false;
				drillUpEffect.drillToIndex = drillToIndex;
				series.setStyle("showDataEffect", drillUpEffect);
				dataProvider = initialDataProvider; 
				
				columnChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				lineChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
				columnChart.removeEventListener(MouseEvent.CLICK, drillUp);
				lineChart.removeEventListener(MouseEvent.CLICK, drillUp);
			}
			
		]]>
	</fx:Script>	
	<fx:Declarations>
		<effects:DrillDownEffect id="drillDownEffect" duration="1500" 
                    effectEnd="chart.showDataTips=true" />
		<effects:DrillUpEffect id="drillUpEffect" duration="1500" 
                    effectEnd="chart.showDataTips=true"/>		
	</fx:Declarations>
    
	<s:HGroup
		width="100%"
		horizontalAlign="right">
		<s:DropDownList selectedIndex="{_selectedViewIndex}"
			change="onChangeComboBox(event)" width="100"
			fontSize="10" fontWeight="bold" fontFamily="verdana">
			<s:ArrayList>
				<fx:String>Bar Chart</fx:String>
				<fx:String>Line Chart</fx:String>
			</s:ArrayList>
		</s:DropDownList>
	</s:HGroup>
	<mx:ViewStack
		id="viewStack"
		selectedIndex="{_selectedViewIndex}"
		creationPolicy="all"
		width="100%" height="100%">
		<s:NavigatorContent
			width="100%" height="100%">
			<mx:ColumnChart
				id="columnChart"
				width="100%" height="100%"
				dataProvider="{dataProvider}"
				showDataTips="true"
				dataTipFunction="columnChartDataTipFunction" fontFamily="verdana" >
				<mx:series>
					<mx:ColumnSeries
						id="columnSeries"
						yField="{properties.@valueField}">
						<mx:itemRenderer>
							<fx:Component>
								<renderers:RollOverBoxItemRenderer color="#E48701" overColor="#FEA318" downColor="#E48701" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:ColumnSeries>
				</mx:series>
				<mx:horizontalAxis>
					<mx:CategoryAxis
						categoryField="{properties.@categoryField}" />
				</mx:horizontalAxis>
			</mx:ColumnChart>
		</s:NavigatorContent>
		<s:NavigatorContent
			width="100%" height="100%">
			<mx:LineChart
				id="lineChart"
				width="100%" height="100%"
				dataProvider="{dataProvider}"
				showDataTips="true"
				dataTipFunction="columnChartDataTipFunction" fontFamily="verdana" >
				<mx:series>
					<mx:LineSeries
						id="lineSeries"
						yField="{properties.@valueField}">
						<mx:itemRenderer>
							<fx:Component>
								<renderers:RollOverBoxItemRenderer />
							</fx:Component>
						</mx:itemRenderer>
					</mx:LineSeries>
				</mx:series>
				<mx:horizontalAxis>
					<mx:CategoryAxis
						categoryField="{properties.@categoryField}" />
				</mx:horizontalAxis>
			</mx:LineChart>
		</s:NavigatorContent>
	</mx:ViewStack>
</PodContentBase>
