<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="{_label}" width="100%" height="100%" 
		   preinitialize="preInit()" 
		   creationComplete="createComplete()"
		   initialize="init()" 
		   xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:fc="http://www.adobe.com/2006/fc" 
		   xmlns:adobe="http://www.adobe.com/2006/fc" 
		   xmlns:pivotComponentClasses="com.adobe.flex.extras.controls.pivotComponentClasses.*" 
		   xmlns:controls="com.adobe.flex.extras.controls.*" 
		   xmlns:olap="com.ignite.olap.*" 
		   xmlns:xmla="com.ignite.xmla.*" 
		   xmlns:browser="com.ignite.olap.browser.*" 
		   xmlns:grid="com.ignite.olap.grid.*">
	
	<mx:Style source="pivotgrid.css" />  
	
	
	<mx:Script>
		<![CDATA[
			import com.ignite.collections.NoiseyArrayCollection;
			import com.ignite.collections.NoiseyCollectionEvent;
			import com.ignite.collections.NoiseyHashMap;
			import com.ignite.collections.NoiseySet;
			import com.ignite.olap.Cell;
			import com.ignite.olap.Element;
			import com.ignite.olap.MDDatasetResult;
			import com.ignite.olap.Member;
			import com.ignite.olap.Query;
			import com.ignite.olap.Tuple;
			import com.ignite.olap.browser.CubeBrowser;
			import com.ignite.olap.controls.TuplePopUp;
			import com.ignite.olap.delegates.MDXQueryDelegate;
			import com.ignite.olap.delegates.PopUpDelegate;
			import com.ignite.olap.dto.QueryResponseDTO;
			import com.ignite.olap.events.TupleSelectorEvent;
			import com.igniteanalytics.logging.ASLogger;
			
			import de.polygonal.ds.HashMap;
			import de.polygonal.ds.LinkedStack;
			import de.polygonal.ds.Set;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.LinkButton;
			import mx.controls.ProgressBar;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.olapDataGridClasses.OLAPDataGridGroupRenderer;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.events.CubeEvent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.olap.IOLAPAxisPosition;
			import mx.olap.IOLAPResult;
			import mx.olap.OLAPQuery;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			//    [Embed("assets/hide.gif")]
			//    public var hideIcon:Class;
			
			//    [Embed("assets/show.gif")]
			//    public var showIcon:Class;
			
			private var logger:ASLogger=new ASLogger("PivotGrid");
			
			[Bindable]
			public var _label:String="New Grid ";
			
			
			[Bindable]
			public var _cubeToUse:String=null;
			[Bindable]
			public var _serverURI:String="";
			[Bindable]
			public var _dataSource:String="";
			[Bindable] 
			public var _catalog:String="";
			
			
			private function init():void{
			}
			private function preInit():void{
				_label=_label+":"+_cubeToUse;
			}
			private function createComplete():void{
				initCube();
				setupListeners();
			}
			
			private function setupListeners():void{
				this._columns.addEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._rows.addEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._measures.addEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._filters.addEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
			}
			private function silenceListeners():void{
				//sometimes tuples need to be added without kicking off a query
				this._columns.removeEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._rows.removeEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._measures.removeEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
				this._filters.removeEventListener(NoiseyCollectionEvent.CHANGED,prepareQuery);
			}
			
			
			private function initCube():void
			{   
				logger.logDebug("initCube instantiated cube:"+_cubeToUse+" uri-"+_serverURI);
				
				cube.addEventListener("complete", completeHandler);
				cube.addEventListener("progress", showProgress);
				cube.addEventListener(FaultEvent.FAULT, refreshFaultHandler);
				
				addProgressBar();
				
				cube._getMembers=false;
				
				cube.refresh();																	
			}
			
			private function completeHandler(event:CubeEvent):void
			{	
				logger.logDebug("completeHandler cube built:"+_cubeToUse+" uri-"+_serverURI);
				logger.logInfo("completeHandler cube built:"+_cubeToUse+" uri-"+_serverURI);
				cb.cube = cube;
				resetHiLowStructures();
				
				PopUpManager.removePopUp(progressBar);
				
			}
			private function showProgress(event:CubeEvent):void
			{
				progressBar.setProgress(100*(event.progress/event.total), 100);
				progressBar.label = event.message;
			}
			private function refreshFaultHandler(event:FaultEvent):void
			{
				PopUpManager.removePopUp(progressBar);
				Alert.show(event.fault.rootCause.text);
			}
			
			private var progressBar:ProgressBar;
			private function addProgressBar():void
			{
				progressBar = new ProgressBar();
				progressBar.minimum = 0;
				progressBar.maximum = 100;
				progressBar.visible = true;
				progressBar.labelPlacement = "bottom"
				progressBar.label = "Building Cube";
				progressBar.direction = "right";
				progressBar.mode = "manual";
				progressBar.width = 300;
				
				PopUpManager.addPopUp(progressBar, this, true);
				var point:Point = new Point(dropColumns.x, dropColumns.y);
				point = dropColumns.localToGlobal(point);
				
				progressBar.move(point.x, point.y+dropColumns.height);
			}
			
			//------------------------------------------------------------
			// QUERY Queing
			//------------------------------------------------------------
			[Bindable]
			public var _maxNumberOfStoredQueryResults:int=5;
			[Bindable]
			public var _queries:LinkedStack=new LinkedStack();
			//^^^ Should contain com.ignite.olap.dto.QueryResponseDTO objects
			public function getLastQuery():QueryResponseDTO{
				if (_queries.size>0){
					return QueryResponseDTO(_queries.peek());
				}else{
					return null;
				}
			}  									
			public function showLastMDX():void{
				if (_queries.size>0){
					var lastQuery:QueryResponseDTO=getLastQuery();
					var queryString:String=lastQuery.mdxString;
					//the last response is also here
					displayMessage(queryString);
				}
			}
			//Ticket 74
			private function hasMeasures(axisSelectors:NoiseyHashMap):Boolean{
				for each(var key:String in axisSelectors.getKeySet()){
					
					var ns:NoiseySet=NoiseySet(axisSelectors.find(key));
					for each (var elem:Element in ns.toArray()){
						if (elem.uniqueName.indexOf("Measures")>-1){
							return true;
						}
					}
				}
				return false;
			}
			//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			//---------------------------------------------
			// Crumb bar support
			// Need to add a hbox or container to the ui to hold the linkbuttons
			//---------------------------------------------
			
			[Bindable]
			private var _useCrumb:Boolean=false;
			public function addNewCrumbItem(qrDTO:QueryResponseDTO):void{
				if (_useCrumb){
					addCrumbItem(createCrumbItem(qrDTO));
				}
			}
			public function removeCrumbs():void{
				this.crumbBar.removeAllChildren();
			}
			public function addCrumbItem(item:LinkButton):void{
				this.crumbBar.addChild(item);
			}
			public function createCrumbItem(qrDTO:QueryResponseDTO):LinkButton{
				if (qrDTO.results){
					var newCrumbItem:LinkButton=new LinkButton();
					newCrumbItem.styleName="crumbItem";
					newCrumbItem.label="Q";
					var callFunc:Function=function reRunQuery():void{
						var token:Object=new Object();
						token.queryQue=qrDTO;
						resultHandler(qrDTO.results,token);
					};
					
					newCrumbItem.addEventListener(MouseEvent.CLICK,callFunc);
				}
				return newCrumbItem;
			} 	
			
			//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			//---------------------------------------------
			//  Query execution on a cube
			//---------------------------------------------
			public function prepareQuery(event:Object):void{
				var x:int=0;														logger.logDebug("prepareQuery");
				if (_columns.size>0 || _rows.size>0){
					logger.logDebug("prepareQuery: cube:"+_cubeToUse+" rows:"+_rows.size+" cols:"+_columns.size+" meas:"+_measures.size);
					//Ticket 74 Error: When the only row is removed and only the measures is in colums
					var validSelections:Boolean=true;
					
					// sreiner changed to require both a row and a col (not just one)
					/* todo
					if (_rows.size+_columns.size==1){
						if (_rows.size==0){
							//make sure that the colum selector is not measures
							validSelections=!(hasMeasures(_columns));	
						}
						if (_columns.size==0){
							validSelections=!(hasMeasures(_rows));	
						}
					}
					*/
					if ( (_rows.size == 0) || (_columns.size == 0) )
					{
						validSelections = false;	
					}
					
					if (validSelections){
						//^^^^^^^^^^^^^^^^^^^^
						var query:Query=MDXQueryDelegate.buildIOLAPQuery(_rows.toArray(),_columns.toArray(),_filters.toArray(),this.cube,true);
						
						var queryQue:QueryResponseDTO=new QueryResponseDTO();
						queryQue.query=query;
						queryQue.createSelectors=true;
						queryQue.updateSelectorsWithResults=true;
						
						executeQuery(queryQue);
					}
				}else{
					clearResults();
				}
				displayHolders(); //handle display of drop areas
			}
			
			
			private function executeQuery(queryQue:QueryResponseDTO):void
			{
				logger.logDebug("executeQuery:");
				//Ticket 32
				CursorManager.setBusyCursor();
				var token:AsyncToken =cube.execute(queryQue.query);						
				try{
					queryQue.mdxString=token.mdxQuery;
				}catch(err:Error){}
				
				token.addResponder(new AsyncResponder(resultHandler, faultHandler,token));
				token.queObject=queryQue;
				
				errorPane.visible = false;
				
				resetHiLowStructures();
				
			}
			private function AdjustDataGrid(e:Object):void{
				logger.logDebug("--------"+e["type"]);
				logger.logDebug("AdjustDataGrid-ColCount:"+odg.columns.length);
				
				try{
					// sreiner todo				AdvancedDataGridColumn(odg.columns[0]).headerRenderer=
					// class missing						new ClassFactory(com.ignite.olap.grid.CheckboxHeaderRenderer);
				}catch(err:Error){
					var i:int=23;
				}
			}
			//---------------------------------------------
			//  Send query result data to the OLAP Grid
			//---------------------------------------------
			private function resultHandler(result:Object, token:Object = null):void
			{																			logger.logDebug("resultHandler: IOLAPResult?:"+(result is IOLAPResult));
				
				
				//odg.addEventListener(Event.RENDER,AdjustDataGrid);
				odg.dataProvider = result as IOLAPResult;
				//	odg.addEventListener(PivotOLAPGrid.EVENT_COLLECTION_CHANGE,AdjustDataGrid);
				odg.addEventListener(PivotOLAPGrid.EVENT_NEWCOLUMNS_LOADED,AdjustDataGrid);
				
				odg.visible=true;
				var queryQue:QueryResponseDTO;
				if (token) queryQue=QueryResponseDTO(token.queObject);
				
				if (result is MDDatasetResult){
					//if it is mdx then populate the popups with 
					//available tuple information
					var flatResults:ArrayCollection=MDDatasetResult(result)._flatResults;
					if (queryQue && queryQue.updateSelectorsWithResults){
						updatePopUpsWithTuples(this._selectors,result as MDDatasetResult);
					}
					if (queryQue && queryQue.createSelectors){
						resetStageWithPopUpsFromResult(result as MDDatasetResult);
					}
				}
				if (queryQue){
					queryQue.results=result;
					_queries.push(queryQue);//mod to ensure que size is kept
				}
				//Ticket 32
				CursorManager.removeBusyCursor();
				//Ticket #80
				displayHolders(); //handle display of drop areas
				addNewCrumbItem(queryQue);
				invalidateProperties();
			}
			private function assimilateElementData(sourcePopUps:NoiseyHashMap,destinationPopUps:Array):void{
				//ticket 65
				//kind of a visitation idea
				//for specific fields within an element preservation 
				//is required. eg. drilldown indicators so that on the 
				//next query we preserve the drill down							
				logger.logDebug("assimilateElementData");
				for each (var key:String in sourcePopUps.getKeySet()){
					var handled:Boolean=false;
					var sAC:NoiseyArrayCollection=NoiseyArrayCollection(sourcePopUps.find(key));
					for each (var element:Object in sAC){
						for each(var destPopUp:TuplePopUp in destinationPopUps){
							try{
								
								if(
									Element(element).isRelated(Element(destPopUp._olapElement))
								){											logger.logDebug("assimilateElementData-joining:"+Element(element).uniqueName);
									destPopUp._selections.disableAutoUpdate();
									destPopUp._selections.removeAll();
									destPopUp._selections.addItem(element);
									destPopUp._selections.enableAutoUpdate();
									handled=true;
									break;
								}
								
							}catch(err:Error){
							}
						}
						if (handled) break;
					}	
					
				}
			}
			private function resetStageWithPopUpsFromResult(m:MDDatasetResult):void{
				var x:PopUpDelegate=new PopUpDelegate(this.cube);
				var popUps:Array=x.createPopUpsFromOLAPResult(m);
				
				assimilateElementData(this._rows,popUps[OLAPQuery.ROW_AXIS]);
				//removeAllSelectors();
				removeSelectors(OLAPQuery.COLUMN_AXIS);
				removeSelectors(OLAPQuery.ROW_AXIS);
				for each (var o:Object in popUps[OLAPQuery.ROW_AXIS]){
					addSelectorToUI(TuplePopUp(o),OLAPQuery.ROW_AXIS);
					addTuple(TuplePopUp(o),OLAPQuery.ROW_AXIS,true);
				}
				for each (o in popUps[OLAPQuery.COLUMN_AXIS]){
					addSelectorToUI(TuplePopUp(o),OLAPQuery.COLUMN_AXIS);
					addTuple(TuplePopUp(o),OLAPQuery.COLUMN_AXIS,true);
				}
				
				/*	if (this._filters.size==0){
				for each (var o:Object in popUps[OLAPQuery.SLICER_AXIS]){
				addTuple(TuplePopUp(o),OLAPQuery.SLICER_AXIS,true);
				this.addSelectorToUI(TuplePopUp(o),OLAPQuery.SLICER_AXIS);
				}	
				}
				*/
				displayHolders();
				
			}
			private function updatePopUpsWithTuples(hs:HashMap,m:MDDatasetResult):void{
				var keys:Array=hs.getKeySet();
				
				for each (var k:String in keys){
					var tuplePop:*=hs.find(String(k)) as TuplePopUp;
					
					if (tuplePop) tuplePop.populateFromResult(m);
				}
			}
			
			//	[Bindable]
			//	private var _blankData:IOLAPResult=new OLAPResult();
			private function clearResults():void{
				logger.logDebug("clearResults");
				try{
					odg.visible=false;
					invalidateProperties();
				}catch(err:Error){
					odg=new PivotOLAPGrid();
				}
			}
			private function faultHandler(info:Object, token:Object = null):void
			{	
				logger.logError("faultHandler:"+info.message);
				//odg.dataProvider = null;
				if(info && info.message){
					showErrorPane(info);
				}
				CursorManager.removeBusyCursor();//Ticket #83
				
			}
			
			//----------------------------------------------------------
			//    FOR Error and Message panes (which are just text areas)
			//-----------------------------------------------------------
			private function displayError(message:String):void{
				showErrorPane({message:message});
			}
			private function displayMessage(message:String):void{
				showMessagePane({message:message});
			}
			public function hideError(event:Object):void{
				errorPane.visible=false;
			}
			public function hideMessage(event:Object):void{
				messagePane.visible=false;
			}
			private function showErrorPane(info:Object):void
			{
				var point:Point = new Point(rowsHolder.x, odg.y);
				point = dropColumns.localToGlobal(point);
				
				errorPane.move(point.x+5, point.y+20);
				errorPane.width = odg.width*0.5;
				
				errorPane.text = info.message;
				errorPane.visible = true;
				errorPane.height = 150;
			}
			private function showMessagePane(info:Object):void
			{
				var point:Point = new Point(rowsHolder.x, odg.y);
				point = dropColumns.localToGlobal(point);
				
				messagePane.move(point.x+5, point.y+20);
				messagePane.width = odg.width*0.4;
				
				messagePane.text = info.message;
				messagePane.visible = true;
				messagePane.height = 150;
			}
			
			[Bindable]
			private var _selectors:HashMap=new HashMap();
			[Bindable]
			private var _columns:NoiseyHashMap=new NoiseyHashMap();
			[Bindable]
			private var _rows:NoiseyHashMap=new NoiseyHashMap();
			[Bindable]
			private var _filters:NoiseyHashMap=new NoiseyHashMap();
			[Bindable]
			private var _measures:NoiseyHashMap=new NoiseyHashMap();
			
			
			
			private function displayHolders():void{//handle display of drop areas
				this.rowsHolder.visible=(this._rows.size==0);
				this.columnsHolder.visible=(this._columns.size==0);
				this.filtersHolder.visible=(this._filters.size==0);
			}
			[Bindable]
			public var _startQuery:String="SELECT {[Measures].[Org Salary]} ON columns, Hierarchize(Union({[Employees].[All Employees]}, [Employees].[All Employees].Children)) ON rows FROM HR WHERE ([Time].[1997])";
			
			
			
			//===============================================================
			//						DRAG DROP SUPPORT
			//---------------------------------------------------------------
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			
			private function doDragEnter(event:DragEvent):void
			{ 																	
				var source:Object=event.dragSource;
				var targetUI:UIComponent=UIComponent(event.target);
				logger.logDebug("doDragEnter");
				if (event.dragSource.dataForFormat("node")){
					logger.logDebug("doDragEnter has node field");
					targetUI.setStyle("backgroundColor","#0099FF");
					DragManager.acceptDragDrop(targetUI);
				}
			}
			
			private function doDragExit(event:DragEvent):void
			{ 																	
				var source:Object=event.dragSource;
				var targetUI:UIComponent=UIComponent(event.target);
				
				if (event.dragSource.dataForFormat("node")){
					targetUI.setStyle("backgroundColor","#0099ff");
				}
			}
			
			//ticket 44 Error when adding same dimension to both rows and columns
			private function validForDrop(node:Object):Boolean{
				/*
				Cannot have the same dimension in different axi
				For Example:
				select
				{ [Measures].[Units Shipped], [Measures].[Units Ordered] } on columns,
				NON EMPTY [Store].[Store Name].members on rows
				from Warehouse WHERE [Store].[All Stores].[USA].[CA].[San Diego].[Store 24]
				
				Throws : Mondrian Error:Dimension '[Store]' appears in more than one independent axis.
				
				*/
				var rValue:Boolean=true;
				
				if (node && node.uniqueName){
					var nodeUName:String=String(node.uniqueName);	
					var dimName:String=nodeUName.substr(0,nodeUName.indexOf("."));
					
					var keys:Array=_selectors.getKeySet();
					for each (var k:Object in keys){
						var tpop:TuplePopUp=TuplePopUp(_selectors.find(k));
						var tUName:String=String(tpop._rootTupleUName);
						var tDim:String=tUName.substr(0,tUName.indexOf("."));
						if (tDim==dimName){
							rValue= false;
						}
					}
				}else{
					rValue= false;
				}
				logger.logDebug("validForDrop:"+rValue);
				return rValue;
			}
			//ticket 44^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			private function doDragDrop(event:DragEvent):void
			{																	logger.logInfo("doDragDrop received");
				var node:Object=event.dragSource.dataForFormat("node");
				var targetUI:UIComponent=UIComponent(event.target);
				if (node)
				{
					if (!validForDrop(node)){
						displayMessage(node.uniqueName +"'s dimension already exists on an axis");
					}else{
						
						var popDel:PopUpDelegate=new PopUpDelegate(this.cube);
						popDel._columnMaximumLabelChars=20;
						popDel._rowMaximumLabelChars=12;
						popDel._filtersMaximumLabelChars=12;
						
						var axisType:int=-1;
						if (targetUI.id=="dropRows"){
							axisType=OLAPQuery.ROW_AXIS;
						}
						if (targetUI.id=="dropColumns"){
							axisType=OLAPQuery.COLUMN_AXIS;
						}
						if (targetUI.id=="dropFilters"){	
							// todo: no filter for now
							//axisType=OLAPQuery.SLICER_AXIS;
						}
						//create popup
						var tPop:TuplePopUp=popDel.createPopUp(node,axisType);			logger.logDebug("doDragDrop:created-"+tPop.id+" "+tPop.name);
						//add to stage/ui
						
						addSelectorToUI(tPop,axisType);
						addTuple(tPop,axisType);
						
					}//if valid-else
				}
			}
			//**********************************************************************************
			// 								TUPLE and Selector Editing
			//**********************************************************************************
			private function addTuple(tupleUI:TuplePopUp,axisType:int,silent:Boolean=false,preserveDrilDown:Boolean=true):void{
				if (silent){
					silenceListeners();
				}																				logger.logDebug("addTuple:"+tupleUI.id +" to "+axisType);
				logger.logDebug("addTuple:selectors:"+tupleUI._selections);
				_selectors.insert(tupleUI.id,tupleUI);//Convienence variable. IF using xmla population
				//Ticket 78, 75
				//Drill Down = true should be reset when added to the stage
				if (!preserveDrilDown)
					for each (var sel:Object in tupleUI._selections){
					Element(sel).drillDownSelected=false;									logger.logDebug("addTuple:"+Element(sel).uniqueName+".drillDown=false");
				}
				switch (axisType){																
					case OLAPQuery.ROW_AXIS:
						this._rows.insert(tupleUI.id,tupleUI._selections);
						break;
					case OLAPQuery.COLUMN_AXIS:
						this._columns.insert(tupleUI.id,tupleUI._selections);
						break;
					
					case OLAPQuery.SLICER_AXIS:
						this._filters.insert(tupleUI.id,tupleUI._selections);
						break;		
				}
				if (silent){
					setupListeners();
				}
			}
			private function addSelectorToUI(tupleUI:TuplePopUp,axisType:int):void{
				var targetUI:UIComponent;																logger.logDebug("addSelectorToUI:"+tupleUI.id+" to "+axisType);
				switch (axisType){
					case OLAPQuery.ROW_AXIS:
						targetUI=this.dropRows;
						break;
					case OLAPQuery.COLUMN_AXIS:
						targetUI=this.dropColumns;
						break;
					
					case OLAPQuery.SLICER_AXIS:
						targetUI=this.dropFilters;		
						break;		
				}
				tupleUI.addEventListener(TupleSelectorEvent.REMOVED,removeATuple);
				tupleUI.addEventListener(TupleSelectorEvent.CHANGED,prepareQuery);
				
				targetUI.setStyle("backgroundColor","white");
				targetUI.addChildAt(tupleUI,0);
				displayHolders();
			}
			
			private function removeATuple(selectorEvent:TupleSelectorEvent):void{
				var key:String=selectorEvent.target.id;									logger.logDebug("removeATuple-"+key);
				removeATupleByKey(key);
			}
			
			private function removeATupleByKey(key:String):void{
				try{																	logger.logDebug("removeATupleByKey:"+key);
					//remove from each arraycollection.  the ids are globally unique
					//so there should not be a risk of deleting a tuple from the wrong axis
					_rows.remove(key);
					var x:Object=_columns.getKeySet();
					_columns.remove(key);
					_measures.remove(key);
					_filters.remove(key);
					_selectors.remove(key);
				}catch(err:Error){
					logger.logError("removeATuple:"+key+" "+err.message);
				}
			}
			public function removeSelectors(axisOrdinal:int):void{
				silenceListeners();
				var keySource:Array=new Array();
				switch (axisOrdinal){
					case OLAPQuery.ROW_AXIS:
						keySource=this._rows.getKeySet();
						break;
					case OLAPQuery.COLUMN_AXIS:
						keySource=this._columns.getKeySet();
						break;
					
					case OLAPQuery.SLICER_AXIS:
						keySource=this._filters.getKeySet();
						break;		
				}
				for each (var key:String in keySource){
					var popUp:TuplePopUp=TuplePopUp(_selectors.find(key));
					popUp.remove();
				}
				setupListeners();
			}
			public function removeAllSelectors():void{
				silenceListeners();
				for each (var keyId:String in _selectors.getKeySet()){
					var popUp:TuplePopUp=TuplePopUp(_selectors.find(keyId));
					popUp.remove();
				}
				setupListeners();
			}
			public function clearStage():void{
				removeAllSelectors();
				clearResults();
				displayHolders();
				CursorManager.removeBusyCursor();
				//	removeCrumbs();
			}
			//**********************************************************************************
			
			private function doDragStart(event:MouseEvent):void 
			{																			logger.logDebug("doDragStart");
				var dragInitiator:Image = event.currentTarget as Image;
				var dragSource:DragSource = new DragSource();
				var dragProxy:Image = new Image();
				dragProxy.source = dragInitiator.source;
				dragProxy.width = dragInitiator.width;
				dragProxy.height= dragInitiator.height;
				dragSource.addData(event.localX, "localX");
				dragSource.addData(event.localY, "localY");
				DragManager.doDrag(dragInitiator, dragSource, event, dragProxy);
			}
			
			private function getDP():void{
				var i:int=0;
				
				var dp:Object=odg.dataProvider;
			}
			public function getChildCount():void{
				trace(this._columns.size);
				trace(dropColumns.getChildren().length);
			}
			public function gridDoubleClickHandler(event:Event):void{
				if (event.type==MouseEvent.DOUBLE_CLICK){
					gridClickHandler(event);
				}
			}
			
			public var columnDrillAble:Boolean=true;
			public var cellDrillAble:Boolean=false;
			
			public function gridClickHandler(event:Event):void{
				var drillDownMDX:String;
				try{
					//if (event.type==MouseEvent.CLICK){
					if (event.type==MouseEvent.CLICK){               
						var i:int=0;
						if (event.target is mx.core.UITextField){
							//----------Clicked on a row or column header------------------------------
							var headerClickedName:String=UITextField(event.target).text;			
							var olapGroup:OLAPDataGridGroupRenderer=OLAPDataGridGroupRenderer(UITextField(event.target).parent);
							if (olapGroup.data is AdvancedDataGridColumn 
								&& columnDrillAble){
								//------------Column click-----------------------
								logger.logDebug("gridClickHandler-drilldown col header-"+headerClickedName);
								var mdxDataSet:MDDatasetResult=MDDatasetResult(event.currentTarget.dataProvider);
								
								var colOffSet:int=PivotOLAPGrid(event.currentTarget).columnCount-mdxDataSet.numCols;
								var selCol:int=olapGroup.listData.columnIndex;
								
								var olapCell:Cell=Cell(mdxDataSet.getCell(0,selCol- colOffSet));
								logger.logDebug("gridClickHandler-drilldown col value-"+olapCell.formattedValue);
								//mark the correct tuples for drilling down
								var m:Member=Member(olapCell.colTuple.members[0]);
								
								var drillDownTuple:Tuple=new Tuple();
								drillDownTuple.addMember(m);
								/*drillDownMDX=MDXQueryDelegate.createDrillDownQuery(drillDownTuple, null,
								cube,
								this._rows.toArray(),
								this._columns.toArray(),
								this._filters.toArray(),
								this.allowEmpty);
								*/
								MDXQueryDelegate.createDrillDownQuery( null,drillDownTuple,
									cube,
									this._rows,
									this._columns,
									this._filters,
									true);
								
								
								
							}else{
								//-------------------- ROW Header click-------------------------
								logger.logDebug("gridClickHandler-drildown row header-"+headerClickedName);
								for each (m in Tuple(olapGroup.data).members){//row header
									if (m.name==headerClickedName){
										
										//				markElementForDrillDown(m.uniqueName,true,OLAPQuery.ROW_AXIS);
										
										drillDownTuple = new Tuple();
										drillDownTuple.addMember(m);
										MDXQueryDelegate.createDrillDownQuery(drillDownTuple, null,
											cube,
											this._rows,
											this._columns,
											this._filters,
											true);
										
										/*drillDownMDX=MDXQueryDelegate.buildQuery(this._rows.toArray(),
										this._columns.toArray(),
										this._filters.toArray(),
										cube,
										this.allowEmpty);
										*/
									}
								}
							}
						}
						
					}else if (cellDrillAble && 
						event.type==ListEvent.ITEM_CLICK){
						
						//var x:Object=OLAPDataGrid(event.currentTarget);
						//var tuple:*=OLAPDataGrid(event.currentTarget).selectedItems[0];
						//var selCell:Object=OLAPDataGrid(event.currentTarget)
						//var tupleName:*=Member(Tuple(tuple).members.getItemAt(0)).uniqueName;
						mdxDataSet = MDDatasetResult(event.currentTarget.dataProvider);
						var gridCell:Object = event.currentTarget.selectedCells[0];
						
						colOffSet =PivotOLAPGrid(event.currentTarget).columnCount-mdxDataSet.numCols;
						//	var rowOffSet:int=OLAPDataGrid(event.currentTarget).rowCount-mdxDataSet.numRows;
						
						olapCell = Cell(mdxDataSet.getCell(gridCell.rowIndex,gridCell.columnIndex- colOffSet));
						logger.logDebug("gridClickHandler-drilling down cell-"+olapCell.formattedValue);
						//mark the correct tuples for drilling down
						var colName:String=Member(olapCell.colTuple.members[0]).name;
						var rowName:String=Member(olapCell.rowTuple.members[0]).name;
						
						//			markElementForDrillDown(colName,true,OLAPQuery.COLUMN_AXIS);
						//				markElementForDrillDown(rowName,true,OLAPQuery.ROW_AXIS);
						
						
						MDXQueryDelegate.createDrillDownQuery(olapCell.rowTuple,
							olapCell.colTuple,
							cube,
							this._rows,
							this._columns,
							this._filters,
							true);
						
						/*drillDownMDX=MDXQueryDelegate.buildQuery(this._rows.toArray(),
						this._columns.toArray(),
						this._filters.toArray(),
						cube,
						this.allowEmpty);*/
						logger.logDebug(drillDownMDX);
						
					}
					if (drillDownMDX){
						var queryQue:QueryResponseDTO=new QueryResponseDTO();
						queryQue.mdxString=drillDownMDX;
						queryQue.createSelectors=true;
						queryQue.updateSelectorsWithResults=true;
						executeQuery(queryQue);
					}
				}catch(err:Error){
					
				}
			}
			//----------------------------------------------
			//---------------------------------------------
			//  High/Low highlighting
			//---------------------------------------------
			// Ticket 33, 
			
			
			public function changeThreshold(event:Object):void{
				var sliderValue:Number=0;//threshold.value;
				clearGridStyling();
				if (sliderValue > 0 || sliderValue<0){
					var threshold:Number=getThreshold(sliderValue);
					if (sliderValue>0){
						highThreshold=threshold;
						lowThreshold=-1;
					}else{
						highThreshold=-1;
						lowThreshold=threshold;
					}
					//Now do the styling
					showGridStyling();
				}
			}	
			public function resetHiLowStructures():void{
				_sortedValues=null;
				_currentValues=new Set();
				highThreshold=-1;
				lowThreshold=-1;
				//	threshold.value=0;
				odg.styleFunction=chainedStyles;
			}
			private var _sortedValues:Array;
			
			private function getThreshold(topPercentage:Number):Number{
				
				if (_sortedValues==null){
					var temp:Array=new Array(_currentValues.size);
					temp=_currentValues.toArray();
					_sortedValues=temp.filter(filterOutNonNumbers);
					_sortedValues.sort(sortNumber);
					temp=null;
				}
				var size:int=_sortedValues.length;
				var offsetThreshold:int=Math.abs(Math.round(size*topPercentage));
				//now we have the number of the population wich is in the topPercentage
				//loop down to the last. ANything above this value should be highlighted
				//thus it is the threshold
				
				if (topPercentage<0){
					return _sortedValues[(_sortedValues.length-offsetThreshold)];
				}else{
					return _sortedValues[offsetThreshold];
				}
				
			}
			private function sortNumber(a:Object,b:Object):Number{
				try{
					if (Number(a)>Number(b)){
						return 1
					}else if(Number(a)<Number(b)){
						return -1;
					}else{
						return 0;
					}
				}catch(err:Error){
					return 0;
				}
				return 0;
			}
			private function filterOutNonNumbers(element:*, index:int, arr:Array):Boolean {
				try{
					return Number(element)>0;
				}catch(err:Error){
					return false;
				}
				return false;
			}
			//---------------------------------------------
			//  Conditional highlighting
			//---------------------------------------------
			// Ticket 33, 34 
			/* http://livedocs.adobe.com/flex/3/html/help.html?content=olapdatagrid_9.html
			
			*/
			private var _currentValues:Set=new Set();
			
			private function getValues(row:IOLAPAxisPosition,column:IOLAPAxisPosition,value:Number):Object{
				//use the styling piece to iterate through all the cells to get a list of values
				//is this worse/better than iterating through the gride via dataprovider=for each cell.... ?
				_currentValues.set(value);
				return null;
			}
			private function chainedStyles(row:IOLAPAxisPosition,column:IOLAPAxisPosition,value:Number):Object{
				getValues(row,column,value);
				return conditionalStyle(row,column,value);
			}
			private function defaultConditionalStyle(row:IOLAPAxisPosition,column:IOLAPAxisPosition,value:Number):Object{
				if ((highThreshold>0) && value>=highThreshold){
					if (highStyle){
						return highStyle;
					}else{
						return {color:highColor,fontWeight:"bold"};	
					}
				}
				if ((lowThreshold>0)&& value<=lowThreshold){
					if (lowStyle){
						return lowStyle;
					}else{
						return {color:lowColor,fontWeight:"bold"};	
					}
				}
				return null;
			}
			private function noStyle(row:IOLAPAxisPosition,column:IOLAPAxisPosition,value:Number):Object{
				return {color:0};	
			}
			public var conditionalStyle:Function=defaultConditionalStyle;
			public var highThreshold:Number=1000;
			public var highColor:Number=204;//0x00FF00
			public var highStyle:Object;
			
			public var lowThreshold:Number=50;
			public var lowColor:Number=16711680;//FF0000
			public var lowStyle:Object;
			
			private function clearGridStyling():void{
				odg.styleFunction=noStyle;
				odg.invalidateList(); odg.regenerateStyleCache(true);
			}
			private function showGridStyling():void{
				odg.styleFunction=conditionalStyle;
				odg.invalidateList(); odg.regenerateStyleCache(true);
			}
			//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			
			private var _fakeQuery:String="select {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS," +
				"  Hierarchize(Union(Union({[Store].[All Stores]}, [Store].[All Stores].Children), [Store].[All Stores].[Canada].Children)) ON ROWS "+
				"from [Sales] "+
				"where [Time].[1997]";
		]]>
	</mx:Script>
	<olap:Cube id="cube" dataSource="{_dataSource}"  catalog="{_catalog}" name="{_cubeToUse}"
			   serviceURL="{_serverURI}"/>
	<!--mx:Style source="assets\darkroom.css"/-->
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox height="100%" id="hbox_right">
			<mx:HBox>
				<mx:LinkButton click="{showLastMDX()}" label="View MDX"/>
				<mx:LinkButton click="{clearStage()}" label="Clear Axes"/>
			</mx:HBox>
			
			<browser:CubeBrowser 
				_includeMembers="true" mouseEnabled="true" 
				styleName="CubeTree" dragEnabled="true" id="cb" 
				width="100%"  height="100%"/>
			
		</mx:VBox>
		<mx:VBox height="100%" width="90%" id="hbox_left">
			<mx:HBox id="crumbBar" height="16" width="100%">
				
			</mx:HBox>
			<mx:HBox height="30" width="100%">
				
				<!--todo flex4 borderColor="#0099ff" borderThickness="2"  width="20%" height="100%"-->
				<mx:Canvas  backgroundColor="white" id="dropFilters" name="dropMeasures"
							dragEnter="doDragEnter(event)" dragDrop="doDragDrop(event)" styleName="dropArea"
							borderColor="#0099ff"   width="20%" height="100%">
					<mx:TextArea id="filtersHolder" editable="false" width="100%" height="30"
								 text="Filters\Measures" styleName="headers" />
				</mx:Canvas>
				
				<!-- todo flex4 borderColor="#0099ff" borderThickness="2"  width="80%" height="100%"-->
				<mx:HBox styleName="dropArea"   backgroundColor="white" id="dropColumns" name="dropColumns" 
						 horizontalAlign="left"
						 dragEnter="doDragEnter(event)" dragDrop="doDragDrop(event)"
						 borderColor="#0099ff"  width="80%" height="100%">
					<mx:TextArea id="columnsHolder" editable="false" width="100%" height="30"
								 text="Columns" styleName="headers"/>
				</mx:HBox>
				
			</mx:HBox>
			<!--borderColor="#0099ff" borderThickness="2"  width="110" height="100%"-->
			<mx:HBox height="100%" width="100%">
				<mx:VBox  backgroundColor="white" styleName="dropArea" id="dropRows" name="dropRows"
						  dragEnter="doDragEnter(event)" dragExit="doDragExit(event)" dragDrop="doDragDrop(event)"
						  borderColor="#0099ff" width="110" height="100%">
					<mx:TextArea id="rowsHolder" editable="false" width="100%" height="100%"
								 text="Rows" styleName="headers"/>
				</mx:VBox>
				
				<!--<mx:OLAPDataGrid columnAxisHeaderStyleName="olapCol" rowAxisHeaderStyleName="olapRow" styleFunction="chainedStyles"   defaultCellString=" " itemClick="gridClickHandler(event)" 
				selectionMode="multipleCells" click="{gridClickHandler(event)}" itemDoubleClick="gridDoubleClickHandler(event)" doubleClick="{gridDoubleClickHandler(event)}"
				styleName="OLAPDataGrid" height="100%"   id="odg" width="100%">
				</mx:OLAPDataGrid>-->
				<grid:PivotOLAPGrid columnAxisHeaderStyleName="olapCol" rowAxisHeaderStyleName="olapRow" styleFunction="chainedStyles"   defaultCellString=" " itemClick="gridClickHandler(event)" 
									selectionMode="multipleCells" click="{gridClickHandler(event)}" itemDoubleClick="gridDoubleClickHandler(event)" doubleClick="{gridDoubleClickHandler(event)}"
									styleName="OLAPDataGridStyle" height="100%"   id="odg" width="100%">
					<!--  EXAMPLE code for how to change the top-most column header:
					NOTE the need to have a unique name for each renderer. 
					<grid:headerRendererProviders>
					<mx:OLAPDataGridHeaderRendererProvider 
					type="{OLAPDataGrid.OLAP_DIMENSION}" uniqueName="[Measures].[Org Salary]" 
					renderer="com.ignite.olap.grid.SortableOLAPHeaderRenderer"
					styleName="Test"/>
					<mx:OLAPDataGridHeaderRendererProvider 
					type="{OLAPDataGrid.OLAP_HIERARCHY}" uniqueName="[Measures].[Org Salary]" 
					renderer="com.ignite.olap.grid.SortableOLAPHeaderRenderer"
					styleName="Test"/>
					<mx:OLAPDataGridHeaderRendererProvider 
					type="{OLAPDataGrid.OLAP_LEVEL}" uniqueName="[Measures].[Org Salary]" 
					renderer="com.ignite.olap.grid.SortableOLAPHeaderRenderer"
					styleName="Test"/>	
					<mx:OLAPDataGridHeaderRendererProvider 
					type="{OLAPDataGrid.OLAP_MEMBER}" uniqueName="[Measures].[Org Salary]" 
					renderer="com.ignite.olap.grid.SortableOLAPHeaderRenderer"
					styleName="Test"/>
					</grid:headerRendererProviders>-->
				</grid:PivotOLAPGrid>
				
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
	<mx:TextArea editable="false"  styleName="errorPanel" click="{hideError(event)}" wordWrap="true" id="errorPane" visible="false"/>
	<mx:TextArea   editable="true"  styleName="messagePanel" focusOut="{hideMessage(event)}" wordWrap="true" id="messagePane" visible="false"/>
</mx:Canvas>

